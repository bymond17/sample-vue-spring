services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    depends_on:
      - backend
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_OPTIONS=--no-deprecation
    command: npm run dev
    networks:
      - frontend-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - maven-repo:/root/.m2
    environment:
      - JAVA_OPTS=-Xmx512m -Xms256m
      - MAVEN_OPTS=-Dmaven.repo.local=/root/.m2/repository
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/sampledb
      - SPRING_DATASOURCE_USERNAME=sampleuser
      - SPRING_DATASOURCE_PASSWORD=samplepass
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 1G
    restart: unless-stopped

  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      - POSTGRES_DB=sampledb
      - POSTGRES_USER=sampleuser
      - POSTGRES_PASSWORD=samplepass
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "sampleuser", "-d", "sampledb" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
    restart: unless-stopped

volumes:
  node_modules:
  maven-repo:
  db-data:

networks:
  frontend-network:
  backend-network: